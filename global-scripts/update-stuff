#!/usr/bin/env bash
set -e

function iscommand
{
  hash "${1}" 2>/dev/null
}

function declare
{
  echo ""
  echo "----------------------------------------"
  echo "-  Updating ${@}"
  echo "----------------------------------------"
}

clear
date

if iscommand brew; then
  declare "Homebrew"
  brew update && brew upgrade
  # Casks need a little bit of a work-around
  outdated_casks="$(brew cask outdated | awk '{print $1}')"
  # http://tldp.org/LDP/abs/html/string-manipulation.html
  echo "${outdated_casks}" | xargs brew cask reinstall
  rm -rf "$(brew --cache)"
fi
if iscommand softwareupdate; then
  declare "softwareupdate"
  softwareupdate --install --all
fi
if iscommand apt-get; then
  declare "apt-get"
  sudo apt-get update && sudo apt-get upgrade
fi
if iscommand pip; then
  declare "pip"
  # - list all outdated pip packages
  # - if we're past the first two lines, print out the first column
  # - pass the package name back to pip to upgrade the package
  pip list --outdated --format=columns | awk 'NR>2 { print $1 }' | xargs -I{} pip install {} --upgrade
fi
if iscommand pip3; then
  declare "pip3"
  # - list all outdated pip packages
  # - if we're past the first two lines, print out the first column
  # - pass the package name back to pip to upgrade the package
  pip3 list --outdated --format=columns | awk 'NR>2 { print $1 }' | xargs -I{} pip3 install {} --upgrade
fi
if iscommand npm; then
  declare "NPM"
  # This may be managed by brew, which will render the package
  # itself ineffective. This is fine.
  npm install npm@latest -g
  # These packages are only managed by node.
  npm update -g
fi
if iscommand apm; then
  declare "Atom Packages"
  apm update --no-confirm
fi
if iscommand exercism; then
  declare "Exercism"
  exercism upgrade
fi
