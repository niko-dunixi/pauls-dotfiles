#!/usr/bin/env bash
set -e

function header
{
  clear
  date
  echo "1 - Be impeccable with your word."
  echo "2 - Don't take anything personally."
  echo "3 - Don't make assumptions."
  echo "4 - Always do your best."
  echo ""
#  printf "\nThere are no men, only your brothers.\nThere are no women, only your sisters.\nWe are family.\nLove unconditionally.\n\n"
  printf "Remember, love unconditionally\n\n"
  if iscommand check-payday; then
    check-payday || true
  fi
}

function iscommand
{
  hash "${1}" 2>/dev/null
}

function declare
{
  echo ""
  echo "----------------------------------------"
  echo "-  Updating ${@}"
  echo "----------------------------------------"
}

header
# if iscommand zsh; then
#   echo "doing zsh stuff"
# INNER=$(cat <<- EOZ
#   # if type upgrade_oh_my_zsh ; then
#   if [[ -o login ]]; then
#     upgrade_oh_my_zsh
#   else
#     echo "ZSH, but no omz"
#   fi
# EOZ
# )
#   echo "inner:: ${INNER}"
#   zsh -c "${INNER}"
# fi
# exit 1
if iscommand brew; then
  declare "Homebrew"
  brew update && brew upgrade
  # Casks need a little bit of a work-around
  outdated_casks="$(brew cask outdated | awk '{print $1}')"
  # http://tldp.org/LDP/abs/html/string-manipulation.html
  echo "${outdated_casks}" | xargs brew cask reinstall
  rm -rf "$(brew --cache)"
  brew cleanup
  brew prune
fi
if iscommand softwareupdate; then
  declare "softwareupdate"
  softwareupdate --install --all
  # echo "We've disabled software updating at this time. It overwrites the dev tools which we need to debug Go applications in GoLand."
  # echo "If it gets overwritten anyway, see the intermediate solution here: https://github.com/derekparker/delve/issues/1165"
  echo "If GoLand stopped working follow this for the moment: https://youtrack.jetbrains.com/issue/GO-5527"
fi
if iscommand apt; then
  declare "apt"
  sudo apt update && sudo apt upgrade
fi
if iscommand conda; then
  declare "conda"
  conda upgrade conda -y
  conda upgrade --all -y
  conda clean -tp -y
else
  # We want to update the pips manually, only if we're
  # not managing things through conda. They get in each
  # other's way.
  if iscommand pip; then
    declare "pip"
    # - list all outdated pip packages
    # - if we're past the first two lines, print out the first column
    # - pass the package name back to pip to upgrade the package
    # echo "Need to sudo to fix pip caches. These suck, I know."
    # sudo chown -R $USER:staff ~/Library/Caches/pip
    # sudo chown -R $USER:staff /tmp/pip-*
    # sudo rm -rf /tmp/pip-*
    pip list --outdated --format=columns | awk 'NR>2 { print $1 }' | xargs -I{} pip install {} --upgrade
  fi
  if iscommand pip3; then
    declare "pip3"
    # - list all outdated pip packages
    # - if we're past the first two lines, print out the first column
    # - pass the package name back to pip to upgrade the package
    pip3 list --outdated --format=columns | awk 'NR>2 { print $1 }' | xargs -I{} pip3 install {} --upgrade
  fi
fi
if iscommand npm; then
  declare "NPM"
  # This may be managed by brew, which will render the package
  # itself ineffective. This is fine.
  # npm install npm@latest -g
  npm install -g npm@lts
  # These packages are only managed by node.
  npm update -g
fi
if iscommand apm; then
  declare "Atom Packages"
  apm update --no-confirm
fi
if iscommand exercism; then
  declare "Exercism"
  exercism upgrade || echo "Exercism is having issues again. Not really a problem, they usually resolve them within an hour or so."
fi
header
